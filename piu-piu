#!/bin/bash

case ${TERM} in *term*)
#                      Color picker
#---------------------------+--------------------------------+---------+
#        Text color         |       Background color         |         |
#------------+--------------+--------------+-----------------+         |
#    Base    |Lighter\Darker|    Base      |Lighter\Darker   |         |
#------------+--------------+--------------+-----------------+         |
RED='\e[31m'; LRED='\e[91m'; BRED='\e[41m'; BLRED='\e[101m' #| Red     |
GRN='\e[32m'; LGRN='\e[92m'; BGRN='\e[42m'; BLGRN='\e[102m' #| Green   |
YLW='\e[33m'; LYLW='\e[93m'; BYLW='\e[43m'; BLYLW='\e[103m' #| Yelow   |
BLU='\e[34m'; LBLU='\e[94m'; BBLU='\e[44m'; BLBLU='\e[104m' #| Blue    |
MGN='\e[35m'; LMGN='\e[95m'; BMGN='\e[45m'; BLMGN='\e[105m' #| Magenta |
CYN='\e[36m'; LCYN='\e[96m'; BCYN='\e[46m'; BLCYN='\e[106m' #| Cyan    |
GRY='\e[37m'; DGRY='\e[90m'; BGRY='\e[47m'; BDGRY='\e[100m' #| Gray    |
#------------------------------------------------------------+---------+
#Effects                                                               |
#----------------------------------------------------------------------+
DEF='\e[0m'   #Default color and effects                               |
BLD='\e[1m'   #Bold\bright                                             |
DIM='\e[2m'   #Dim\darken                                              |
CUR='\e[3m'   #Italic fnt                                              |
UND='\e[4m'   #Underline                                               |
INV='\e[7m'   #Inverted                                                |
COF='\e[?25l' #Cursor Off                                              |
CON='\e[?25h' #Cursor On                                               |
#----------------------------------------------------------------------+
;; esac

#start opt---------------------------------
tillboss=100        #100
 bhealth=100        #100
 savetty=$(stty -g) #save terminal settings
 enumber=0
 bonuses=("ammo" "life")
  goback=false
   enmax=10
   frags=0
    life=3
    ammo=100
     rnd=10
      BY=1
      BX=$(($(tput cols) - 11))
       X=1
       Y=1
       L=0
       J=0
       K=0

#messages---------------------------------------------------------------------------------------------------------
    help=("                  ^     "
		  "                  ${RED}W${DEF}     "
		  "${BLD}Control with:${DEF} < ${RED}A S D${DEF} > "
		  "                  v     "
		  "                        "
		  "${BLD}Shoot with:${DEF}       ${YLW}P${DEF} ${BLD}${LRED}-=${DEF}${BLD}${GRN}>${DEF} ")

    lose=("                            "
"${BLD}${RED}  ____    _    __  __ _____ ${DEF}"
     "${LRED} / ___|  / \  |  \/  | ____|${DEF}"
     "${LRED}| | __  / _ \ | |\/| |  _|  ${DEF}"
      "${RED}| |_\ \/ ___ \| |  | | |___ ${DEF}"
"${DIM}${RED} \____/_/   \_\_|__|_|_____|${DEF}"
"${BLD}${RED}  / _ \ \   / / ____|  _ \  ${DEF}"
     "${LRED} | | | \ \ / /|  _| | |_) | ${DEF}"
      "${RED} | |_| |\ V / | |___|  _ <  ${DEF}"
"${DIM}${RED}  \___/  \_/  |_____|_| \_| ${DEF}")

     win=("                        "
"${BLD}${GRN}__        _____ _   _ _ ${DEF}"
     "${LGRN}\ \      / /_ _| \ | | |${DEF}"
     "${LGRN} \ \ /\ / / | ||  \| | |${DEF}"
      "${GRN}  \ V  V /  | || |\  |_|${DEF}"
"${DIM}${GRN}   \_/\_/  |___|_| \_(_)${DEF}")

#sprites----------------------------------------------
  eraser="         "

   ammob=("${BLD}${LRED}-=${DEF}${GRN}>${DEF}"
	      "${BLD}${LRED}-=${DEF}${GRN}>${DEF}"
	      "${BLD}${LRED}-=${DEF}${GRN}>${DEF}")

   shoot=("${RED} -${DEF}${BLD}${GRN}>${DEF}"
		  "${BLD}${LRED}-=${DEF}${GRN}>${DEF}"
		  "${LRED}=-${DEF}${BLD}${GRN}>${DEF}"
		  "${RED}- ${DEF}${GRN}>${DEF}")

  bshoot=("${LYLW}█▓▒░${DEF}"
		  "${LYLW}▓▒░▒${DEF}"
		  "${LYLW}▒░▒▓${DEF}"
		  "${LYLW}░▒▓█${DEF}"
		  "${LYLW}▒▓█▓${DEF}"
		  "${LYLW}▓█▓▒${DEF}")

   lifep=("${RED}/V\ ${DEF}"
	      "${RED}\ / ${DEF}"
		  "${RED} V  ${DEF}")

	hero=("  "
		  "__     "
		  "|${RED}★${DEF}〵____ "
		  " \_| /${UND}${BLD} °${DEF})-"
		  "   |/    "
		  "     ")

	 big=(" O   O "
		  "O   O  "
		  "   O   "
		  "  O   O")

   small=("o  "
	 	  "   "
	 	  "  o"
		  " o ")

   tree1=("${DIM}${GRN} _  ${DEF}"
          "${DIM}${GRN}/ \ ${DEF}"
          "${DIM}${GRN}\|/ ${DEF}"
          "${DGRY} | ${DEF} ")

   tree2=("${GRN} _._  ${DEF}"
          "${GRN}/   \ ${DEF}"
          "${GRN}\ | / ${DEF}"
          "${GRN} \`${DEF}${DIM}║${DEF}${GRN}/\ ${DEF}"
          "${DIM}  ║${DEF}${GRN}_/ ${DEF}"
          "${DIM}  ║   ${DEF}")

   tree3=("${LGRN}   _._    ${DEF}"
          "${LGRN}  /   \   ${DEF}"
          "${LGRN} _\ ${DEF}${GRY}|${DEF}${LGRN} /   ${DEF}"
          "${LGRN}/  \`${DEF}${GRY}║${DEF}${LGRN}/ _  ${DEF}"
          "${LGRN}\_${DEF}${GRY}\ ║ ${DEF}${LGRN}/ \ ${DEF}"
          "${LGRN}   ${DEF}${GRY}\║ /${DEF}${LGRN}_/ ${DEF}"
          "${GRY}    ║/    ${DEF}"
          "${GRY}    ║     ${DEF}"
          "${GRY}    ║     ${DEF}")

#functions--------------------------------------------
function sprites {		    #dynamic sprites
   alien=(" _${UND}${BLD}_${DEF}_"
	      "(${UND}${small[$L]}${DEF})")

bigalien=("      "
		  "   _${UND}_${DEF}_  "
		  " _/${small[$((3 - $L))]}\_ "
		  "(${UND}${big[$L]}${DEF})"
		  "         ")
}

function get_dimensions {
	endx=$( tput cols  )
	endy=$( tput lines )

bullendx=$(( $endx - 4  ))
heroendx=$(( $endx - 12 ))
heroendy=$(( $endy - 7  ))
enmyendx=$(( $endx - 5  ))
enmyendy=$(( $endy - 7  ))
bossendx=$(( $endx - 11 ))
bossendy=$(( $endy - 6  ))
tre1endx=$(( $endx - 4  ))
tre1endy=$(( $endy - 6  ))
tre2endx=$(( $endx - 6  ))
tre2endy=$(( $endy - 8  ))
tre3endx=$(( $endx - 10 ))
tre3endy=$(( $endy - 11 ))
lineendy=$(( $endy - 2  ))
}

function line { printf "\e[${lineendy};0H"; printf %.s- $(seq ${endx}); }

function bye {
	stty ${savetty}			#restore terminal settings
	printf "${CON}${DEF}"
	clear
	ls --color=auto
	exit 0
}

function remove_obj {
	for (( k=0; k<$er; k++ )); do echo -e "\e[$(($OY + $k));${OX}H$eraser"; done
	unset OBJ[$i]; OBJ=("${OBJ[@]}"); NO=${#OBJ[@]}
	((i--)); [ $i -lt 0 ] && i=0
}

function remove_piu {
	echo -e "\e[$PY;${PX}H    "
	unset PIU[$p]; PIU=("${PIU[@]}"); NP=${#PIU[@]}
	((p--)); [ $p -lt 0 ] && p=0
}

function mess () {
	tput cnorm -- normal	#get cursor back
	stty $savetty
	clear
	case $1 in
		 "win")	x=$(( $endx / 2 - ${#win} / 2 ))
				for (( i=0; i<${#win[*]}; i++ ));  do echo -e "\e[$(( $endy / 2 - 5 + $i ));${x}H${win[$i]}";  done
				printf "\e[${endy};0H"; exit 0;;

		"lose")	x=$(( $endx / 2 - ${#lose} / 2 ))
				for (( i=0; i<${#lose[*]}; i++ )); do echo -e "\e[$(( $endy / 2 - 5 + $i ));${x}H${lose[$i]}"; done
				printf "\e[${endy};0H"; exit 0;;

		"help")	x=$(( $endx / 2 - ${#help} / 2 ))
				for (( i=0; i<${#help[*]}; i++ )); do echo -e "\e[$(( $endy / 2 - 5 + $i ));${x}H${help[$i]}"; done;;
	esac
}

trap bye INT
get_dimensions
mess "help"
stty -echo			#hide input
printf "${COF}"
sleep 3
clear

#main game loop----------------------------------------------------------------------------------------------------------
while true; do

	get_dimensions; sprites; line

	#get keys
	read -t0.01 -n1 input; case $input in

		"w") ((Y--)); [ $Y -lt 1         ] && Y=1;;
		"a") ((X--)); [ $X -lt 1         ] && X=1;;
		"s") ((Y++)); [ $Y -gt $heroendy ] && Y=$heroendy;;
		"d") ((X++)); [ $X -gt $heroendx ] && X=$heroendx;;
		"p") [ $ammo -gt 0 ] && PIU+=("$HY $HX") && ((ammo--));;

	esac

	#hero collide coordinates
	HX=$(($X + 9)); HY=$(($Y + 3))

	#check win\lose
	[ $bhealth -le 0 ] && mess win
	[ $life    -le 0 ] && mess lose

	#timings
	((L++)); [ $L -gt 3  ] && L=0   # hero's bullet
	((J++)); [ $J -gt 5  ] && J=0   # boss' bullet
	((K++)); [ $K -gt 20 ] && K=0   # boss' fire rate
	((Q++)); [ $Q -gt 6  ] && Q=0   # tree1(small) speed
	((W++)); [ $W -gt 4  ] && W=0   # tree2(medium) speed
	((E++)); [ $E -gt 2  ] && E=0   # tree3(big) speed

	#move\check\print all flying to hero objects
	NO=${#OBJ[@]}; for (( i=0; i<$NO; i++ )); do read OX OY type <<< ${OBJ[$i]}; case $type in

		"alien")	er=${#alien[@]}; sn=
					#fly away
					if [ $OX -lt 1 ]; then remove_obj; ((enumber--))
					else
						#move
						((OX--)); [ $OX -lt 0 ] && OX=0; OBJ[$i]="$OX $OY $type"

						#print
						for (( p=0; p<${er}; p++ )); do echo -e "\e[$(($OY + $p));${OX}H${alien[$p]} "; done
					fi

					#hit by plane
					for (( t=0; t<$er; t++ )); do case "$(($OY + 1)) $(($OX + $t))" in

						"$HY $HX") ((life--)); ((frags++)); ((enumber--)); remove_obj;;

					esac; done

					#hit by bullet
					NP=${#PIU[@]}; for (( p=0; p<$NP; p++ )); do for (( t=0; t<$er; t++ )); do case "$(($OY + 1)) $(($OX + $t))" in

						"${PIU[$p]}")	[ $((RANDOM % $rnd)) -eq 0 ] && OBJ=("${OBJ[@]}" "$OX $OY ${bonuses[$((RANDOM % ${#bonuses[@]}))]}") #get bonus
										((frags++));  ((enumber--)); remove_obj; remove_piu;;

					esac; done; done;;

		"ammo")		er=${#ammob[@]}
					#fly away
					if [ $OX -lt 1 ]; then remove_obj;
					else
						#move
						((OX--)); [ $OX -lt 0 ] && OX=0; OBJ[$i]="$OX $OY $type"

						#print
						for (( p=0; p<${er}; p++ )); do echo -e "\e[$(($OY + $p));${OX}H${ammob[$p]} "; done
					fi

					#get by plane
					for (( t=0; t<$er; t++ )); do case "$(($OY + $t)) $OX" in "$HY $HX") ((ammo+=100)); remove_obj;; esac done;;

		"life")		er=${#lifep[@]}
					#fly away
					if [ $OX -lt 1 ]; then remove_obj;
					else
						#move
						((OX--)); [ $OX -lt 0 ] && OX=0; OBJ[$i]="$OX $OY $type"

						#print
						for (( p=0; p<${er}; p++ )); do echo -e "\e[$(($OY + $p));${OX}H${lifep[$p]}"; done
					fi

					#get by plane
					for (( t=0; t<$er; t++ )); do case "$(($OY + $t)) $OX" in "$HY $HX") ((life++)); remove_obj;; esac done;;

		"tree1")	er=${#tree1[@]}
					#fly away
					if [ $OX -lt 1 ]; then remove_obj;
					else
						#move
                        [ ${Q} = 0 ] && { ((OX--)); [ $OX -lt 0 ] && OX=0; OBJ[$i]="$OX $OY $type"; }

						#print
						for (( p=0; p<${er}; p++ )); do echo -e "\e[$(($OY + $p));${OX}H${tree1[$p]}"; done
					fi;;

		"tree2")	er=${#tree2[@]}
					#fly away
					if [ $OX -lt 1 ]; then remove_obj;
					else
						#move
						[ ${W} = 0 ] && { ((OX--)); [ $OX -lt 0 ] && OX=0; OBJ[$i]="$OX $OY $type"; }

						#print
						for (( p=0; p<${er}; p++ )); do echo -e "\e[$(($OY + $p));${OX}H${tree2[$p]}"; done
					fi;;

		"tree3")	er=${#tree3[@]}
					#fly away
					if [ $OX -lt 1 ]; then remove_obj;
					else
						#move
						[ ${E} = 0 ] && { ((OX--)); [ $OX -lt 0 ] && OX=0; OBJ[$i]="$OX $OY $type"; }

						#print
						for (( p=0; p<${er}; p++ )); do echo -e "\e[$(($OY + $p));${OX}H${tree3[$p]}"; done
					fi;;

		"bullet")	er=1
					#fly away
					if [ $OX -lt 1 ]; then remove_obj;
					else
						#move
						((OX--)); [ $OX -lt 0 ] && OX=0; OBJ[$i]="$OX $OY $type"

						#print
						echo -e "\e[$OY;${OX}H${bshoot[$J]} "
					fi

					#hit plane
					case "$OX $OY" in "$HX $HY") ((life--)); remove_obj;; esac;;

	esac; done

	#move\check\print hero bullets
	NP=${#PIU[@]}; for (( p=0; p<$NP; p++ )); do read PY PX <<< ${PIU[$p]}

		#fly away
		if [ $PX -ge $bullendx ]; then remove_piu
		else
			#move
			((PX++)); [ $PX -gt $bullendx ] && PX=$bullendx; PIU[$p]="$PY $PX"

			#print
			echo -e "\e[$PY;${PX}H ${shoot[$L]}"
		fi

		#hit boss
		[ $frags -ge $tillboss ] && for (( t=1; t<3; t++ )); do case "$PY $PX" in

			"$(($BY + $t)) $BX"         ) ((bhealth--)); remove_piu;;
			"$(($BY + $t)) $(($BX + 1))") ((bhealth--)); remove_piu;;

		esac; done

	done

	#BOSS
	if [ $frags -ge $tillboss ]; then
		#health
		bar=
		hm=$(( $endx - 10 ))
		hp=$(( $hm * $bhealth / 100 ))
		for (( i=0;    i<$hp;  i++  )); do bar="▒${bar}"; done
		for (( i=$hp;  i<$hm;  i++  )); do bar="${bar} "; done
		echo -e "\e[$(($endy - 1));1H ${BLD}BOSS: |${RED}$bar${DEF}${BLD}|${DEF}"

		#boss move
		[ $BY -lt $Y                                     ] && ((BY++))
		[ $BY -gt $Y                                     ] && ((BY--))
		[ $BX -gt $(($endx / 2)) -a "$goback" == "false" ] && ((BX--)) || goback=true
		[ $BX -lt $bossendx      -a "$goback" == "true"  ] && ((BX++)) || goback=false

		#boss print
		for (( i=0; i<${#bigalien[@]}; i++ )); do echo -e "\e[$(($BY + $i));${BX}H ${bigalien[$i]} "; done

		#boss fire
		[ $BY -eq $Y -a $K -eq 0 ] && OBJ+=("$(($BX - 4)) $(($BY + 3)) bullet")

		#add enemy
		[ $enumber -lt $enmax ] && ((enumber++)) && OBJ+=("$(($BX + 2)) $(($BY + 3)) alien")
	else
		[ $enumber -lt $enmax ] && ((enumber++)) && OBJ+=("$enmyendx $(( (RANDOM % $enmyendy) + 3 )) alien")
	fi

    #add tree
    [ $((RANDOM % 40)) = 0 ] && { treetype=$((RANDOM % 3 + 1)); case ${treetype} in
        1) OBJ+=("${tre1endx} ${tre1endy} tree1");;
        2) OBJ+=("${tre2endx} ${tre2endy} tree2");;
        3) OBJ+=("${tre3endx} ${tre3endy} tree3");;
    esac; }

	#print hero
	for (( i=0; i<${#hero[@]}; i++ )); do echo -e "\e[$(($Y + $i));${X}H ${hero[$i]} "; done

	#print game status
	echo -e "\e[0;0H${BLD}killed aliens: ${DEF}${CYN}$frags${DEF}  ${BLD}Life: ${DEF}${CYN}$life${DEF}  ${BLD}Ammo: ${DEF}${CYN}$ammo${DEF} "

done
