#!/bin/bash
#----------------------------------------------------------------------+
#Color picker, usage: printf ${BLD}${CUR}${RED}${BBLU}"Some text"${DEF}|
#---------------------------+--------------------------------+---------+
#        Text color         |       Background color         |         |
#------------+--------------+--------------+-----------------+         |
#    Base    |Lighter\Darker|    Base      |Lighter\Darker   |         |
#------------+--------------+--------------+-----------------+         |
RED='\e[31m'; LRED='\e[91m'; BRED='\e[41m'; BLRED='\e[101m' #| Red     |
GRN='\e[32m'; LGRN='\e[92m'; BGRN='\e[42m'; BLGRN='\e[102m' #| Green   |
YLW='\e[33m'; LYLW='\e[93m'; BYLW='\e[43m'; BLYLW='\e[103m' #| Yellow  |
BLU='\e[34m'; LBLU='\e[94m'; BBLU='\e[44m'; BLBLU='\e[104m' #| Blue    |
MGN='\e[35m'; LMGN='\e[95m'; BMGN='\e[45m'; BLMGN='\e[105m' #| Magenta |
CYN='\e[36m'; LCYN='\e[96m'; BCYN='\e[46m'; BLCYN='\e[106m' #| Cyan    |
GRY='\e[37m'; DGRY='\e[90m'; BGRY='\e[47m'; BDGRY='\e[100m' #| Gray    |
#------------------------------------------------------------+---------+
# Effects                                                              |
#----------------------------------------------------------------------+
DEF='\e[0m'   #Default color and effects                               |
BLD='\e[1m'   #Bold\brighter                                           |
DIM='\e[2m'   #Dim\darker                                              |
CUR='\e[3m'   #Italic font                                             |
UND='\e[4m'   #Underline                                               |
INV='\e[7m'   #Inverted                                                |
COF='\e[?25l' #Cursor Off                                              |
CON='\e[?25h' #Cursor On                                               |
#----------------------------------------------------------------------+
# Text positioning, usage: XY 10 10 "Some text"                        |
XY   () { printf "\e[${2};${1}H${3}";   } #                            |
#----------------------------------------------------------------------+
# Line, usage: line - 10 | line -= 20 | line "word1 word2 " 20         |
line () { printf %.s"${1}" $(seq ${2}); } #                            |
#----------------------------------------------------------------------+
# start opt |----------------------------------------------------------+
tillboss=100		#100
 bhealth=100		#100
 savetty=$(stty -g) #save terminal settings
 enumber=0
 bonuses=("ammo" "life")
  goback=false
   enmax=10
   frags=0
    life=3
    ammo=100
     rnd=10
      BY=1
      BX=$(($(tput cols) - 11))
	  BN=0
       g=0
       X=1
       Y=1
       L=0
       J=0
       K=0
	   S=0

# messages |------------------------------------------------------------------------------------------------------------
    help=("                  ^     "
		  "                  ${RED}W${DEF}     "
		  "${BLD}Control with:${DEF} < ${RED}A S D${DEF} > "
		  "                  v     "
		  "                        "
		  "${BLD}Shoot with:${DEF}       ${YLW}P${DEF} ${BLD}${LRED}-=${DEF}${BLD}${GRN}>${DEF} ")

    lose=(  '                            '
${BLD}${RED}'  ____    _    __  __ _____ '${DEF}
     ${LRED}' / ___|  / \  |  \/  | ____|'${DEF}
     ${LRED}'| | __  / _ \ | |\/| |  _|  '${DEF}
      ${RED}'| |_\ \/ ___ \| |  | | |___ '${DEF}
${DIM}${RED}' \____/_/   \_\_|__|_|_____|'${DEF}
${BLD}${RED}'  / _ \ \   / / ____|  _ \  '${DEF}
     ${LRED}' | | | \ \ / /|  _| | |_) | '${DEF}
      ${RED}' | |_| |\ V / | |___|  _ <  '${DEF}
${DIM}${RED}'  \___/  \_/  |_____|_| \_| '${DEF})

#     win=("                        "
#"${BLD}${GRN}__        _____ _   _ _ ${DEF}"
#     "${LGRN}\ \      / /_ _| \ | | |${DEF}"
#     "${LGRN} \ \ /\ / / | ||  \| | |${DEF}"
#      "${GRN}  \ V  V /  | || |\  |_|${DEF}"
#"${DIM}${GRN}   \_/\_/  |___|_| \_(_)${DEF}")

     win=(  '                           '
${BLD}${GRN}'__        ______ _    _    '${DEF}
     ${LGRN}'\ \      / /____| |  | |   '${DEF}
     ${LGRN}' \ \ /\ / /  _| | |  | |   '${DEF}
      ${GRN}'  \ V  V /| |___| |__| |__ '${DEF}
${DIM}${GRN}' __\_/\_/_|_____|____|____|'${DEF}
${BLD}${GRN}'|  _ \ / _ \| \ | | ____| |'${DEF}
     ${LGRN}'| | | | | | |  \| |  _| | |'${DEF}
      ${GRN}'| |_| | |_| | |\  | |___|_|'${DEF}
${DIM}${GRN}'|____/ \___/|_| \_|_____(_)'${DEF})

# sprites |-------------------------------------------------------------------------------------------------------------
  eraser="           "

   ammob=("${BLD}${LRED}-=${DEF}${GRN}>${DEF}"
	      "${BLD}${LRED}-=${DEF}${GRN}>${DEF}"
	      "${BLD}${LRED}-=${DEF}${GRN}>${DEF}")

   shoot=("${RED} -${DEF}${BLD}${GRN}>${DEF}"
		  "${BLD}${LRED}-=${DEF}${GRN}>${DEF}"
		  "${LRED}=-${DEF}${BLD}${GRN}>${DEF}"
		  "${RED}- ${DEF}${GRN}>${DEF}")

  bshoot=("${LYLW}█▓▒░${DEF}"
		  "${LYLW}▓▒░▒${DEF}"
		  "${LYLW}▒░▒▓${DEF}"
		  "${LYLW}░▒▓█${DEF}"
		  "${LYLW}▒▓█▓${DEF}"
		  "${LYLW}▓█▓▒${DEF}")

   lifep=("${RED}/V\ ${DEF}"
	      "${RED}\ / ${DEF}"
		  "${RED} V  ${DEF}")

	 big=(" O   O "
		  "O   O  "
		  "   O   "
		  "  O   O")

   small=("o  "
	 	  "   "
	 	  "  o"
		  " o ")

#    gun=( = ≡ ); G=${gun[0]}

	hero=("  "
		  "__     "
		  "|${RED}★${DEF}〵____ "
		  " \_| /${UND}${BLD} °${DEF})="
		  "   |/    "
		  "     ")

   tree1=(${DIM}${GRN}' _  '${DEF}
          ${DIM}${GRN}'/ \ '${DEF}
          ${DIM}${GRN}'\\'${DGRY}'|'${DIM}${GRN}'/ '${DEF}
          ${DGRY}' | '${DEF})

   tree2=(${GRN}' _._  '${DEF}
          ${GRN}'/   \ '${DEF}
          ${GRN}'\\'${DEF}${DIM}' | '${DEF}${GRN}'/ '${DEF}
          ${GRN}' \\'${DEF}${DIM}'║'${DEF}${GRN}'/\ '${DEF}
          ${DIM}'  ║'${DEF}${GRN}'_/ '${DEF}
          ${DIM}'  ║ '${DEF})

   tree3=(${LGRN}'   _._  '${DEF}
          ${LGRN}'  /   \ '${DEF}
          ${LGRN}' _\ '${DEF}${GRY}'|'${DEF}${LGRN}' / '${DEF}
          ${LGRN}'/  \\'${DEF}${GRY}'║'${DEF}${LGRN}'/ _ '${DEF}
          ${LGRN}'\_'${DEF}${GRY}'\\'${DEF}${LGRN}'/'${DEF}${GRY}'║ '${DEF}${LGRN}'/ \ '${DEF}
          ${LGRN}'   '${DEF}${GRY}'\║ /'${DEF}${LGRN}'_/ '${DEF}
          ${GRY}'    ║/ '${DEF}
          ${GRY}'    ║ '${DEF}
          ${GRY}'    ║ '${DEF})

  cloud1=(${DIM}${BLU}' ,-.,  '${DEF}
          ${DIM}${BLU}'(    ) '${DEF}
          ${DIM}${BLU}' `+-`  '${DEF})

  cloud2=(${BLU}' ,-._.,  '${DEF}
          ${BLU}'(      ) '${DEF}
          ${BLU}' `-...`  '${DEF})

  cloud3=(${LBLU}' ,`"`.-"`.  '${DEF}
          ${LBLU}'(         ) '${DEF}
          ${LBLU}' `--.....`  '${DEF})

    boom=(${LRED}'   .-. '${DEF}
          ${LRED}'  (   )'${DEF}
          ${LRED}'   `-` '${DEF}
          ${RED}'  , - . '${DEF}
          ${RED}' (     )'${DEF}
          ${RED}'  . _ . '${DEF}
          ${DIM}${RED}'   `  "  '${DEF}
          ${DIM}${RED}'(       )'${DEF}
          ${DIM}${RED}'  _ _ .  '${DEF}); boomN=${#boom[@]}; boomC=3

     Sun=(${YLW}'       ___ |       '${DEF}
          ${YLW}'---````    \       '${DEF}
          ${YLW}'           _`.     '${DEF}
          ${YLW}'        ../   `..__'${DEF}
          ${YLW}'     ../        /  '${DEF}
          ${YLW}'    /          /   '${DEF}
          ${YLW}'              /    '${DEF}
          ${YLW}'              /    '${DEF}
          ${YLW}'             /     '${DEF}
          ${YLW}'_...---``  |       '${DEF}
          ${YLW}'        _.-\       '${DEF}
          ${YLW}'   _.--`    `.     '${DEF}
          ${YLW}' -`          ,`..__'${DEF}
          ${YLW}'           ,`     |'${DEF}
          ${YLW}'         ,`       |'${DEF}
          ${YLW}'       _`        | '${DEF}
          ${YLW}'                 | '${DEF}
          ${YLW}'                 | '${DEF}
          ${YLW}'     _...--|       '${DEF}
          ${YLW}'..--`      \       '${DEF}
          ${YLW}'         .. `.     '${DEF}
          ${YLW}'     _.-`     `..__'${DEF}
          ${YLW}'  ..`         .`   '${DEF}
          ${YLW}'             /     '${DEF}
          ${YLW}'            /      '${DEF}
          ${YLW}'          .`       '${DEF}
          ${YLW}'                   '${DEF}); SunN=${#Sun[@]}; SunC=9

# functions |-----------------------------------------------------------------------------------------------------------
function sprites {		    #dynamic sprites

   alien=(" _${UND}${BLD}_${DEF}_"
	      "(${UND}${small[$L]}${DEF})")

bigalien=("      "
		  "   _${UND}_${DEF}_  "
		  " _/${small[$((3 - $L))]}\_ "
		  "(${UND}${big[$L]}${DEF})"
		  "         ")

#	hero=("  "
#		  "__     "
#		  "|${RED}★${DEF}〵____ "
#		  " \_| /${UND}${BLD} °${DEF})${G}"
#		  "   |/    "
#		  "     ")
}

function get_dimensions {
	endx=$( tput cols  )
	endy=$( tput lines )

bullendx=$(( $endx - 4  ))
heroendx=$(( $endx - 12 ))
heroendy=$(( $endy - 7  ))
enmyendx=$(( $endx - 5  ))
enmyendy=$(( $endy - 7  ))
bossendx=$(( $endx - 11 ))
bossendy=$(( $endy - 6  ))
tre1endx=$(( $endx - 4  ))
tre1endy=$(( $endy - 6  ))
tre2endx=$(( $endx - 6  ))
tre2endy=$(( $endy - 8  ))
tre3endx=$(( $endx - 10 ))
tre3endy=$(( $endy - 11 ))
cld1endx=$(( $endx - 7  ))
cld2endx=$(( $endx - 9  ))
cld3endx=$(( $endx - 12 ))
lineendy=$(( $endy - 2  ))
Sunsendx=$(( $endx - 19 ))
}

function bye {
	stty ${savetty}			#restore terminal settings
	printf "${CON}${DEF}"
	clear
	ls --color=auto
	exit 0
}

function remove_obj {
	for (( k=0; k<$er; k++ )); do XY ${OX} $(($OY + $k)) "$eraser"; done
	unset OBJ[$i]; OBJ=("${OBJ[@]}"); NO=${#OBJ[@]}
	((i--)); [ $i -lt 0 ] && i=0
}

function remove_piu {
	XY ${PX} ${PY} "    "
	unset PIU[$p]; PIU=("${PIU[@]}"); NP=${#PIU[@]}
	((p--)); [ $p -lt 0 ] && p=0
}

function mess () {
	printf "${CON}"	#get cursor back
	stty $savetty
	clear
	case $1 in
		 "win")	x=$(( $endx / 2 - ${#win} / 2 ))
				for (( i=0; i<${#win[*]}; i++ ));  do XY ${x} $(( $endy / 2 - 5 + $i )) "${win[$i]}";  done
				XY 0 ${endy}; exit 0;;

		"lose")	x=$(( $endx / 2 - ${#lose} / 2 ))
				for (( i=0; i<${#lose[*]}; i++ )); do XY ${x} $(( $endy / 2 - 5 + $i )) "${lose[$i]}"; done
				XY 0 ${endy}; exit 1;;

		"help")	x=$(( $endx / 2 - ${#help} / 2 ))
				for (( i=0; i<${#help[*]}; i++ )); do XY ${x} $(( $endy / 2 - 5 + $i )) "${help[$i]}"; done;;
	esac
}

trap bye INT
get_dimensions
mess "help"
stty -echo			# hide input
printf "${COF}"
sleep 3
clear

# main game loop |======================================================================================================
while true; do

	get_dimensions; sprites
	XY 0 ${lineendy}; line - ${endx}	#bottom line

	#get keys
	read -t0.01 -n1 input; case $input in

		"w") ((Y--)); [ $Y -lt 1         ] && Y=1;;
		"a") ((X--)); [ $X -lt 1         ] && X=1;;
		"s") ((Y++)); [ $Y -gt $heroendy ] && Y=$heroendy;;
		"d") ((X++)); [ $X -gt $heroendx ] && X=$heroendx;;
		"p") [ $ammo -gt 0 ] && { PIU+=("$HY $HX"); ((ammo--)); };; # G=${gun[$g]}; ((g++)); [ ${g} -gt 3 ] && g=0; };;

	esac

	#hero collide coordinates
	HX=$(($X + 9)); HY=$(($Y + 3))

	#check win\lose
	[ $bhealth -le 0 ] && mess win
	[ $life    -le 0 ] && mess lose

	#timings
	((L++)); [ $L -gt 3  ] && L=0   # sprites animation
	((J++)); [ $J -gt 5  ] && J=0   # boss' bullet animation
	((K++)); [ $K -gt 20 ] && K=0   # boss' fire rate
	((Q++)); [ $Q -gt 6  ] && Q=0   # tree1(small) speed
	((W++)); [ $W -gt 4  ] && W=0   # tree2(medium) speed
	((E++)); [ $E -gt 2  ] && E=0   # tree3(big) speed
	[ ${E} = 0 ] && { ((S+=${SunC}));  [ $S -gt ${SunN}  ] && S=0; }   # Sun animation


	#move\check\print all flying to hero objects
	NO=${#OBJ[@]}; for (( i=0; i<$NO; i++ )); do read OX OY type <<< ${OBJ[$i]}; case $type in

	   "alien")		er=${#alien[@]}; sn=
					#fly away
					[ $OX -lt 1 ] && { remove_obj; ((enumber--)); continue; }

					#move
					((OX--)); [ $OX -lt 0 ] && OX=0; OBJ[$i]="$OX $OY $type"

					#print
					for (( p=0; p<${er}; p++ )); do XY ${OX} $(($OY + $p)) "${alien[$p]} "; done

					#hit by plane
					for (( t=0; t<$er; t++ )); do case "$(($OY + 1)) $(($OX + $t))" in

						"$HY $HX") ((life--)); ((frags++)); ((enumber--)); remove_obj; OBJ+=("${OX} ${OY} boom");;

					esac; done

					#hit by bullet
					NP=${#PIU[@]}; for (( p=0; p<$NP; p++ )); do for (( t=0; t<$er; t++ )); do case "$(($OY + 1)) $(($OX + $t))" in

						"${PIU[$p]}")	[ $((RANDOM % $rnd)) -eq 0 ] && OBJ=("${OBJ[@]}" "$OX $OY ${bonuses[$((RANDOM % ${#bonuses[@]}))]}") #get bonus
										((frags++));  ((enumber--)); remove_obj; remove_piu; OBJ+=("${OX} ${OY} boom");;

					esac; done; done;;

		"ammo")		er=${#ammob[@]}
					#fly away
					[ $OX -lt 1 ] && { remove_obj; continue; }

					#move
					((OX--)); [ $OX -lt 0 ] && OX=0; OBJ[$i]="$OX $OY $type"

					#print
					for (( p=0; p<${er}; p++ )); do XY ${OX} $(($OY + $p)) "${ammob[$p]} "; done

					#get by plane
					for (( t=0; t<$er; t++ )); do case "$(($OY + $t)) $OX" in "$HY $HX") ((ammo+=100)); remove_obj;; esac done;;

		"life")		er=${#lifep[@]}
					#fly away
					[ $OX -lt 1 ] && { remove_obj; continue; }

					#move
					((OX--)); [ $OX -lt 0 ] && OX=0; OBJ[$i]="$OX $OY $type"

					#print
					for (( p=0; p<${er}; p++ )); do XY ${OX} $(($OY + $p)) "${lifep[$p]}"; done

					#get by plane
					for (( t=0; t<$er; t++ )); do case "$(($OY + $t)) $OX" in "$HY $HX") ((life++)); remove_obj;; esac done;;

	  "bullet") 	er=1
					#fly away
					[ $OX -lt 1 ] && { remove_obj; continue; }

					#move
					((OX--)); [ $OX -lt 0 ] && OX=0; OBJ[$i]="$OX $OY $type"

					#print
					XY ${OX} ${OY} "${bshoot[$J]} "

					#hit plane
					case "$OX $OY" in "$HX $HY") ((life--)); remove_obj;; esac;;

		"boom")		er=${boomC}
					#print
					for part in "${boom[@]:$B:$boomC}"; do XY ${OX} ${OY} " ${part}"; ((OY++)); done
					[ ${E} = 0 ] && { ((B+=${boomC})); [ $B -gt ${boomN} ] && { B=0; remove_obj; }; };;

	   "tree1")		er=${#tree1[@]}
					#fly away
					[ $OX -lt 1 ] && { remove_obj; continue; }

					#move
					[ ${Q} = 0 ] && { ((OX--)); [ $OX -lt 0 ] && OX=0; OBJ[$i]="$OX $OY $type"; }

					#print
					for (( p=0; p<${er}; p++ )); do XY ${OX} $(($OY + $p)) "${tree1[$p]}"; done;;

	   "tree2") 	er=${#tree2[@]}
					#fly away
					[ $OX -lt 1 ] && { remove_obj; continue; }

					#move
					[ ${W} = 0 ] && { ((OX--)); [ $OX -lt 0 ] && OX=0; OBJ[$i]="$OX $OY $type"; }

					#print
					for (( p=0; p<${er}; p++ )); do XY ${OX} $(($OY + $p)) "${tree2[$p]}"; done;;

	   "tree3") 	er=${#tree3[@]}
					#fly away
					[ $OX -lt 1 ] && { remove_obj; continue; }

					#move
					[ ${E} = 0 ] && { ((OX--)); [ $OX -lt 0 ] && OX=0; OBJ[$i]="$OX $OY $type"; }

					#print
					for (( p=0; p<${er}; p++ )); do XY ${OX} $(($OY + $p)) "${tree3[$p]}"; done;;

	  "cloud1") 	er=${#cloud1[@]}
					#fly away
					[ $OX -lt 1 ] && { remove_obj; continue; }

					#move
					[ ${Q} = 0 ] && { ((OX--)); [ $OX -lt 0 ] && OX=0; OBJ[$i]="$OX $OY $type"; }

					#print
					for (( p=0; p<${er}; p++ )); do XY ${OX} $(($OY + $p)) "${cloud1[$p]}"; done;;

	  "cloud2") 	er=${#cloud2[@]}
					#fly away
					[ $OX -lt 1 ] && { remove_obj; continue; }

					#move
					[ ${W} = 0 ] && { ((OX--)); [ $OX -lt 0 ] && OX=0; OBJ[$i]="$OX $OY $type"; }

					#print
					for (( p=0; p<${er}; p++ )); do XY ${OX} $(($OY + $p)) "${cloud2[$p]}"; done;;

	  "cloud3") 	er=${#cloud3[@]}
					
					[ $OX -lt 1 ] && { remove_obj; continue; }												#fly away
					[ ${E} =  0 ] && { ((OX--)); [ $OX -lt 0 ] && OX=0; OBJ[$i]="$OX $OY $type"; }			#move
					for (( p=0; p<${er}; p++ )); do XY ${OX} $(($OY + $p)) "${cloud3[$p]}"; done;;	#print
	esac; done

	#move\check\print hero bullets
	NP=${#PIU[@]}; for (( p=0; p<$NP; p++ )); do read PY PX <<< ${PIU[$p]}

		#fly away
		[ $PX -ge $bullendx ] && { remove_piu; continue; }

		#move
		((PX++)); [ $PX -gt $bullendx ] && PX=$bullendx; PIU[$p]="$PY $PX"

		#print
		XY ${PX} ${PY} " ${shoot[$L]}"

		#hit boss
		[ $frags -ge $tillboss ] && for (( t=1; t<3; t++ )); do case "$PY $PX" in

			"$(($BY + $t)) $BX"         ) ((bhealth--)); remove_piu;;
			"$(($BY + $t)) $(($BX + 1))") ((bhealth--)); remove_piu;;

		esac; done

	done

	#BOSS
	if [ $frags -ge $tillboss ]; then
		#health
		bar=
		hm=$(( $endx - 10 ))
		hp=$(( $hm * $bhealth / 100 ))
		for (( i=0;    i<$hp;  i++  )); do bar="▒${bar}"; done
		for (( i=$hp;  i<$hm;  i++  )); do bar="${bar} "; done
		XY 1 $(($endy - 1)) " ${BLD}BOSS: |${RED}$bar${DEF}${BLD}|${DEF}"

		#boss move
		[ $BY -lt $Y                                     ] && ((BY++))
		[ $BY -gt $Y                                     ] && ((BY--))
		[ $BX -gt $(($endx / 2)) -a "$goback" == "false" ] && ((BX--)) || goback=true
		[ $BX -lt $bossendx      -a "$goback" == "true"  ] && ((BX++)) || goback=false

		#boss print
		for (( i=0; i<${#bigalien[@]}; i++ )); do XY ${BX} $(($BY + $i)) " ${bigalien[$i]} "; done

		#boss fire
		[ $BY -eq $Y -a $K -eq 0 ] && OBJ+=("$(($BX - 4)) $(($BY + 3)) bullet")

		#add enemy
		[ $enumber -lt $enmax ] && { ((enumber++)); OBJ+=("$(($BX + 2)) $(($BY + 3)) alien"); }
	else
		[ $enumber -lt $enmax ] && { ((enumber++)); OBJ+=("$enmyendx $(( (RANDOM % $enmyendy) + 3 )) alien"); }
	fi

    #add cloud
    [ $((RANDOM % 60)) = 0 ] && { cloudtype=$((RANDOM % 3 + 1)); case ${cloudtype} in
        1) OBJ+=("${cld1endx} $(( (RANDOM % 10) + 2 )) cloud1");;
        2) OBJ+=("${cld2endx} $(( (RANDOM % 10) + 2 )) cloud2");;
        3) OBJ+=("${cld3endx} $(( (RANDOM % 10) + 2 )) cloud3");;
    esac; }

    #add tree
    [ $((RANDOM % 40)) = 0 ] && { treetype=$((RANDOM % 3 + 1)); case ${treetype} in
        1) OBJ+=("${tre1endx} ${tre1endy} tree1");;
        2) OBJ+=("${tre2endx} ${tre2endy} tree2");;
        3) OBJ+=("${tre3endx} ${tre3endy} tree3");;
    esac; }

	#print Sun
	SY=1; for part in "${Sun[@]:$S:$SunC}"; do XY ${Sunsendx} ${SY} " ${part}"; ((SY++)); done

	#print hero
	for (( i=0; i<${#hero[@]}; i++ )); do XY ${X} $(($Y + $i)) " ${hero[$i]} "; done

	#print game status
	XY 0 0 "${BLD}killed aliens: ${DEF}${CYN}$frags${DEF}  ${BLD}Life: ${DEF}${CYN}$life${DEF}  ${BLD}Ammo: ${DEF}${CYN}$ammo${DEF} "

done
